(defun main (&aux (n 10000000))
  (declare (optimize (speed 3) (debug 0) (safety 0)))
  (let ((h (make-array n :element-type 'fixnum)))
    (dotimes (i n)
      (setf (aref h i) i))
    (labels ((swap (x y)
               (rotatef (aref h x) (aref h y)))
             (next (pos n)
               (declare (type fixnum pos n))
               (let ((next (+ 1 (* pos 2))))
                 (if (and (< (1+ next) n)
                          (< (aref h next)
                             (aref h (1+ next))))
                     (1+ next)
                     next)))
             (push-down (pos n)
               (declare (type fixnum pos n))
               (when (< pos (floor n 2))
                 (let ((p (next pos n)))
                   (when (< (aref h pos) (aref h p))
                     (swap p pos)
                     (push-down p n))))))
      (declare (inline swap next))
      (loop for i from (floor n 2) downto 0
            do (push-down i n))
      (loop for n* from (1- n) downto 1
            do (swap 0 n*)
            do (push-down 0 n*))
      (dotimes (i n)
        (assert (= i (aref h i)))))))

(defun timed-main ()
  (declare (optimize (speed 3) (debug 0) (safety 0)))
  (let ((start (get-internal-real-time)))
    (main)
    (let ((end (get-internal-real-time)))
      (format t "Done in ~a ms~%" (floor (* 1000 (/ (- end start)
                                                    internal-time-units-per-second)))))))

(timed-main)
